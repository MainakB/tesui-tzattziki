#!groovy
def DAYS_TO_KEEP = '10'
def BUILDS_TO_KEEP = '10'
def DOCKER_IMAGE = 'kaniamu/uiautomationbrowsers:latest'
def DOCKER_LABEL_DIND = 'dind'

def ENV_JENKINS = 'true'
def JENKINSFILE_COMMON = './ci/Jenkinsfile-common'
def common = null


def getCreds() {
    def cred
    if (env.platform && env.platformList) {
        throw new Exception('Test parameter can either have platform or platformlist and not both.')
     } else if (env.platform && env.platform.contains('gc-') || (env.platformList && env.platformList.contains('gov'))) {
        cred = 'DockerGearRepo_gov'
     } else {
        cred = null
    }
    return cred
}

pipeline {
    agent none
    options {
        timestamps()
        buildDiscarder(logRotator(
             daysToKeepStr: DAYS_TO_KEEP,
             numToKeepStr: BUILDS_TO_KEEP,
             artifactDaysToKeepStr: DAYS_TO_KEEP,
             artifactNumToKeepStr: BUILDS_TO_KEEP
         ))
    }

    environment {
        JENKINS_CI = "${ENV_JENKINS}"
        BROWSERNAME = "${env.browser}"
    }

    stages {
        stage('Linux Execution') {
            agent {
                docker {
                    image DOCKER_IMAGE
                    label DOCKER_LABEL_DIND
                }
            }

            stages {
                stage('setup-linux') {
                    steps {
                        script {
                            common = load JENKINSFILE_COMMON
                            common.setupWrapper()
                        }
                    }
                }

                stage('test-linux') {
                    steps {
                        script {
                            common.testStageWrapper()
                        }
                    }
                    post {
                        success { script { common.postTestSuccessWrapper() } }
                        failure { script { common.postTestFailureWrapper() } }
                        always { script { common.always(currentBuild, env.platform, GIT_BRANCH, env.BUILD_URL) } }
                    }
                }
            }
        }
    }

    post {
        always { script { echo 'Test complete!' } }
    }
}
