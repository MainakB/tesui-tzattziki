// ATTACHMENTS_PATTERNS = 'Reports/report/index2.html'

def setBuildDesc(currentBuild, platform, gitBranch) {
    def op_system = env.operating_system != null && env.operating_system != '' ? env.operating_system.toLowerCase() : 'linux'
    def platformValue = platform ? platform : 'Multi Tenant'
    if (gitBranch.contains('/')) {
        currentBuild.description = "Tenant -> ${platformValue},\nBranch -> ${gitBranch.split('/')[1]},\nOS -> ${op_system}"
     } else {
        currentBuild.description = "Tenant -> ${platformValue},\nBranch -> ${gitBranch},\nOS -> ${op_system}"
    }
}

def cleanCheckout() {
    checkout scm
}

def npmInstall() {
    try {
        npmConfig()
        npmInstallGlobals()
        npmInstallLocals()
     } catch (ex) {
        clearRegistry()
        npmInstallGlobals()
        npmInstallLocals()
    }
}

def npmConfig() {
    sh 'npm config set strict-ssl false'
}

def npmInstallGlobals() {
    sh 'npm install grunt-cli -g'
}

def npmInstallLocals() {
    sh 'npm install'
}

def clearRegistry() {
    sh 'npm config delete registry'
}

def test() {
    def suites = jobParams.suites != null ? jobParams.suites.trim() : jobParams.suites
    def customer = jobParams.customer != null ? jobParams.customer.trim() : jobParams.customer
    def browser = jobParams.browser != null ? jobParams.browser.trim() : jobParams.browser

    sh "grunt test --suites=${suites} --customer=${customer} --browser=${browser}"
}

 /*
  *  post: success
  */
def success(emailSuccess) {
    notifySuccess(emailSuccess)
    cleanWorkspace()
}

 /*
  *  post: back to normal
  */
def backToNormal(emailBackToNormal) {
    notifyBackToNormal(emailBackToNormal)
    cleanWorkspace()
}

 /*
  *  post: failure
  */
def failure(emailFailure) {
    notifyFailure(emailFailure)
    cleanWorkspace()
}

def isBackToNormal(currentBuild) {
    currentBuild.previousBuild != null && currentBuild.previousBuild.result != 'SUCCESS'
}

def notifySuccess(emailSuccess) {
    def op_system = env.operating_system != null && env.operating_system != '' ? env.operating_system.toLowerCase() : 'linux'
    emailext (
         subject: "${op_system} build passed validation for tenant - ${env.platform}",
         //  attachmentsPattern: ATTACHMENTS_PATTERNS,
         body: "Build(${op_system}) passed validation (${env.JOB_NAME} [${env.BUILD_NUMBER}]). Check console output at ${env.BUILD_URL}console",
         to: emailSuccess
     )
}

def notifyBackToNormal(emailBackToNormal) {
    def op_system = env.operating_system != null && env.operating_system != '' ? env.operating_system.toLowerCase() : 'linux'
    emailext (
         subject: "${op_system} build passed validation after previously failing for tenant - ${env.platform}",
         //  attachmentsPattern: ATTACHMENTS_PATTERNS,
         body: "Build(${op_system}) passed validation after previously failing (${env.JOB_NAME} [${env.BUILD_NUMBER}]). Check console output at ${env.BUILD_URL}console",
         to: emailBackToNormal
     )
}

def notifyFailure(emailFailure) {
    def op_system = env.operating_system != null && env.operating_system != '' ? env.operating_system.toLowerCase() : 'linux'
    emailext (
         subject: "${op_system} build failed validation for tenant - ${env.platform}",
         //  attachmentsPattern: ATTACHMENTS_PATTERNS,
         body: "Build(${op_system}) failed validation (${env.JOB_NAME} [${env.BUILD_NUMBER}]). Check console output at ${env.BUILD_URL}console",
         to: emailFailure
     )
}

 /*
  *  post: always
  */
def always(currentBuild, platform, gitBranch, buildUrl) {
    // reportResults()
    archiveLogs()
}

// def reportResults() {
//     System.setProperty('hudson.model.DirectoryBrowserSupport.CSP', '')
//     publishHTML (target: [
//        allowMissing: false,
//        alwaysLinkToLastBuild: false,
//        keepAll: true,
//        reportDir: 'Reports/report',
//        reportFiles: 'index.html',
//        reportName: 'Cucumber Report'
//      ])
// }

def archiveLogs() {
    archiveArtifacts artifacts: 'Reports/', allowEmptyArchive: true
//Uncomment below line to save baseline images in artifact, comment above line when this is active and vice versa.
//archiveArtifacts artifacts: 'Reports/baseImages/*.png', allowEmptyArchive: true
//archiveArtifacts artifacts: 'Reports/*.pdf', allowEmptyArchive: true
}

def cleanWorkspace() {
    cleanWs notFailBuild: true
}

def setupWrapper() {
    cleanCheckout()
    npmInstall()
}

def postTestSuccessWrapper() {
    if (isBackToNormal(currentBuild)) {
        backToNormal("${env.emailOnSuccess}")
     } else {
        // sh 'node node_modules/@internal-tools/someuinext/Core/CdnFilePathMerger.js'
        success("${env.emailOnSuccess}")
    }
}

def postTestFailureWrapper() {
    // sh 'node node_modules/@internal-tools/someuinext/Core/CdnFilePathMerger.js'
    failure("${env.emailOnFailure}")
}

def testStageWrapper() {
    def exceptionThrown = false
    try {
        test(env)
     } catch (err) {
        exceptionThrown = true
        if (env.stageRetryCounter && (env.stageRetryCounter as Integer) > 0) {
            retry(env.stageRetryCounter as Integer) {
                test(env)
            }
         } else {
            echo "Error thrown ${err}"
            throw err
        }
    }
}
return this
